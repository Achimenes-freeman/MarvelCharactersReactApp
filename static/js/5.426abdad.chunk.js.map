{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchCharForm/SearchCharForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","classObjecFit","descriptionVisible","length","slice","className","src","alt","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","onCharLoaded","updateChar","id","Math","floor","random","then","useEffect","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharsList","totalChar","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","CSSTransition","classNames","mountOnEnter","unmountOnExit","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","style","TransitionGroup","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","SearchCharForm","getCharacterByName","results","to","initialValues","validationSchema","Yup","charName","min","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","total","getAllComics","newComicsList","_transformComics","totalComics","getComic","path","extension","urls","pageCount","title","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.426abdad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n            getCharacter(id)\n                .then(onCharLoaded);\n    }\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 10000);\n\n        // return () => {\n        //     clearInterval(timerId)\n        // }\n    },[])\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null; \n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let classObjecFit = 'randomchar__img';\n    \n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        classObjecFit += ' obj-fit-contain';\n    }\n\n    const descriptionVisible = (description && description.length > 200) ? `${description.slice(0, 200)}...` : description;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={classObjecFit}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {descriptionVisible}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = ({newCharsList, totalChar}) => {\n        let ended = false;\n        if ((newCharsList.length < 3) || (offset === totalChar)) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharsList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 3);\n        setCharEnded(charEnded => ended);\n\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition\n                classNames=\"char__item\"\n                mountOnEnter\n                unmountOnExit>\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                                    props.onCharSelected(item.id);\n                                    focusOnItem(i);\n                                }}\n                        onKeyPress={(e) => {\n                                        if (e.key === ' ' || e.key === 'Enter') {\n                                            props.onCharSelected(item.id);\n                                            focusOnItem(i);\n                                        }\n                                    }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n                \n            )\n        });\n\n        return (\n            <TransitionGroup className=\"char__grid\">\n                    {items}\n            </TransitionGroup>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError}= useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if(!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    useEffect(() => {\n            updateChar();\n    }, [props.charId]);\n\n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null; \n\n        return (\n                <div className=\"char__info\">\n                    {skeleton}\n                    {errorMessage}\n                    {spinner}\n                    {content}\n                </div>\n        )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let classObjecFit = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? 'obj-fit-char-list-item' : null;\n    \n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} className={classObjecFit}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {\n                    comics.length > 0 ? null : 'Комиксы отсутствуют'\n                }\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\n\nexport default CharInfo;","import { Component } from \"react/cjs/react.production.min\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './searchCharForm.scss';\r\n\r\nconst SearchCharForm = () => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">Ther is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/MarvelCharactersReactApp/characters/${char[0].id}`} className=\" button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return(\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n            initialValues={{\r\n                'charName':''\r\n            }}\r\n\r\n            validationSchema={Yup.object({\r\n                charName: Yup.string()\r\n                            .min(2, 'Минимум 2 символа для ввода')\r\n                            .required('Обязательное поле!') \r\n            })}\r\n\r\n            onSubmit = {({charName}) => {\r\n                updateChar(charName);\r\n            }}\r\n            >\r\n\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            type=\"text\"\r\n                            name=\"charName\"\r\n                            id=\"charName\"\r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type=\"submit\" \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">FIND</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchCharForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchCharForm from \"../searchCharForm/SearchCharForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <SearchCharForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=44338feddb6196554b6dc439e066b3ff';\r\n    const _baseOffset = 0;\r\n\r\n    \r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=3&offset=${offset}&${_apiKey}`);\r\n        return {\r\n            newCharsList: res.data.results.map(_transformCharacter),\r\n            totalChar: res.data.total\r\n        };\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?nameStartsWith=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return {\r\n            newComicsList: res.data.results.map(_transformComics),\r\n            totalComics: res.data.total\r\n        };\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? char.description : 'Описание отсутствует...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items \r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n        return {\r\n            id: comics.id,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} р.` : 'No information the number of page',\r\n            description: comics.description ? comics.description : 'Описание отсутствует...',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            title: comics.title ? comics.title : null,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices[0].price > 0 ? comics.prices[0].price + '$' : 'Not available' \r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, getCharacterByName, getAllComics, getComic, clearError}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"sourceRoot":""}